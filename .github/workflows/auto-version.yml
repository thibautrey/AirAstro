name: Auto Version Increment

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
    types: [closed]

jobs:
  auto-version:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Analyze commit and get changed files
        id: changed-files
        run: |
          # Récupérer le message du dernier commit
          COMMIT_MSG=$(git log -1 --pretty=format:'%s')
          echo "Commit message: $COMMIT_MSG"

          # Analyser le commit pour déterminer s'il faut l'ignorer
          chmod +x scripts/analyze-commit.sh
          VERSION_TYPE=$(scripts/analyze-commit.sh "$COMMIT_MSG")

          echo "Analysis result: $VERSION_TYPE"

          # Vérifier que VERSION_TYPE est valide
          if [ "$VERSION_TYPE" = "IGNORE" ]; then
            echo "Commit should be ignored for versioning"
            echo "should_version=false" >> "$GITHUB_OUTPUT"
            exit 0
          elif [ "$VERSION_TYPE" = "major" ] || [ "$VERSION_TYPE" = "minor" ] || [ "$VERSION_TYPE" = "patch" ]; then
            echo "should_version=true" >> "$GITHUB_OUTPUT"
            echo "version_type=$VERSION_TYPE" >> "$GITHUB_OUTPUT"
          else
            echo "Error: Invalid version type: $VERSION_TYPE"
            echo "should_version=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          # Récupérer les fichiers modifiés
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Pour les PR mergées, on compare avec le commit parent de la merge
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          else
            # Pour les push directs, on compare avec le commit précédent
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Détection des changements dans chaque package
          SERVER_CHANGED=false
          WEB_CHANGED=false
          MOBILE_CHANGED=false

          while IFS= read -r file; do
            if [[ "$file" == server/* ]]; then
              SERVER_CHANGED=true
            elif [[ "$file" == apps/web/* ]]; then
              WEB_CHANGED=true
            elif [[ "$file" == apps/airastro/* ]]; then
              MOBILE_CHANGED=true
            fi
          done <<< "$CHANGED_FILES"

          echo "server_changed=$SERVER_CHANGED" >> "$GITHUB_OUTPUT"
          echo "web_changed=$WEB_CHANGED" >> "$GITHUB_OUTPUT"
          echo "mobile_changed=$MOBILE_CHANGED" >> "$GITHUB_OUTPUT"

      - name: Install jq for JSON manipulation
        if: steps.changed-files.outputs.should_version == 'true'
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Update Server Version
        if: steps.changed-files.outputs.should_version == 'true' && steps.changed-files.outputs.server_changed == 'true'
        run: |
          cd server
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "Current server version: $CURRENT_VERSION"
          VERSION_TYPE="${{ steps.changed-files.outputs.version_type }}"

          # Validation du VERSION_TYPE
          if [ -z "$VERSION_TYPE" ] || [ "$VERSION_TYPE" = "null" ]; then
            echo "Error: VERSION_TYPE is empty or null"
            exit 1
          fi

          # Parse current version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment based on version type
          case $VERSION_TYPE in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_VERSION="$NEW_MAJOR.0.0"
              ;;
            "minor")
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="$MAJOR.$NEW_MINOR.0"
              ;;
            "patch")
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
              ;;
            *)
              echo "Error: Invalid version type: $VERSION_TYPE"
              exit 1
              ;;
          esac

          echo "New server version: $NEW_VERSION"

          # Update package.json
          jq ".version = \"$NEW_VERSION\"" package.json > package.json.tmp && mv package.json.tmp package.json

          echo "SERVER_NEW_VERSION=$NEW_VERSION" >> "$GITHUB_ENV"

      - name: Update Web Version
        if: steps.changed-files.outputs.should_version == 'true' && steps.changed-files.outputs.web_changed == 'true'
        run: |
          cd apps/web
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "Current web version: $CURRENT_VERSION"
          VERSION_TYPE="${{ steps.changed-files.outputs.version_type }}"

          # Validation du VERSION_TYPE
          if [ -z "$VERSION_TYPE" ] || [ "$VERSION_TYPE" = "null" ]; then
            echo "Error: VERSION_TYPE is empty or null"
            exit 1
          fi

          # Parse current version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment based on version type
          case $VERSION_TYPE in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_VERSION="$NEW_MAJOR.0.0"
              ;;
            "minor")
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="$MAJOR.$NEW_MINOR.0"
              ;;
            "patch")
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
              ;;
            *)
              echo "Error: Invalid version type: $VERSION_TYPE"
              exit 1
              ;;
          esac

          echo "New web version: $NEW_VERSION"

          # Update package.json
          jq ".version = \"$NEW_VERSION\"" package.json > package.json.tmp && mv package.json.tmp package.json

          echo "WEB_NEW_VERSION=$NEW_VERSION" >> "$GITHUB_ENV"

      - name: Update Mobile Version
        if: steps.changed-files.outputs.should_version == 'true' && steps.changed-files.outputs.mobile_changed == 'true'
        run: |
          cd apps/airastro
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "Current mobile version: $CURRENT_VERSION"
          VERSION_TYPE="${{ steps.changed-files.outputs.version_type }}"

          # Validation du VERSION_TYPE
          if [ -z "$VERSION_TYPE" ] || [ "$VERSION_TYPE" = "null" ]; then
            echo "Error: VERSION_TYPE is empty or null"
            exit 1
          fi

          # Parse current version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment based on version type
          case $VERSION_TYPE in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_VERSION="$NEW_MAJOR.0.0"
              ;;
            "minor")
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="$MAJOR.$NEW_MINOR.0"
              ;;
            "patch")
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
              ;;
            *)
              echo "Error: Invalid version type: $VERSION_TYPE"
              exit 1
              ;;
          esac

          echo "New mobile version: $NEW_VERSION"

          # Update package.json
          jq ".version = \"$NEW_VERSION\"" package.json > package.json.tmp && mv package.json.tmp package.json

          echo "MOBILE_NEW_VERSION=$NEW_VERSION" >> "$GITHUB_ENV"

      - name: Commit version changes
        if: steps.changed-files.outputs.should_version == 'true'
        run: |
          # Vérifier s'il y a des changements à commiter
          if git diff --quiet; then
            echo "No version changes to commit"
            exit 0
          fi

          # Construire le message de commit
          COMMIT_MSG="chore: auto-increment version(s) [${{ steps.changed-files.outputs.version_type }}]"

          if [ "${{ steps.changed-files.outputs.server_changed }}" = "true" ] && [ -n "$SERVER_NEW_VERSION" ]; then
            COMMIT_MSG="$COMMIT_MSG - server: $SERVER_NEW_VERSION"
          fi

          if [ "${{ steps.changed-files.outputs.web_changed }}" = "true" ] && [ -n "$WEB_NEW_VERSION" ]; then
            COMMIT_MSG="$COMMIT_MSG - web: $WEB_NEW_VERSION"
          fi

          if [ "${{ steps.changed-files.outputs.mobile_changed }}" = "true" ] && [ -n "$MOBILE_NEW_VERSION" ]; then
            COMMIT_MSG="$COMMIT_MSG - mobile: $MOBILE_NEW_VERSION"
          fi

          echo "Commit message: $COMMIT_MSG"

          # Add et commit
          git add .
          git commit -m "$COMMIT_MSG"

      - name: Push changes
        if: steps.changed-files.outputs.should_version == 'true' && github.event_name == 'push'
        run: |
          # Vérifier s'il y a des commits à pousser
          if git log origin/$(git branch --show-current)..HEAD --oneline | grep -q .; then
            git push origin HEAD
            echo "Version changes pushed to repository"
          else
            echo "No commits to push"
          fi

      - name: Create Git Tags
        if: steps.changed-files.outputs.should_version == 'true' && github.event_name == 'push'
        run: |
          # Créer des tags pour chaque version mise à jour
          if [ "${{ steps.changed-files.outputs.server_changed }}" = "true" ] && [ -n "$SERVER_NEW_VERSION" ]; then
            git tag "server-v$SERVER_NEW_VERSION"
            echo "Created tag: server-v$SERVER_NEW_VERSION"
          fi

          if [ "${{ steps.changed-files.outputs.web_changed }}" = "true" ] && [ -n "$WEB_NEW_VERSION" ]; then
            git tag "web-v$WEB_NEW_VERSION"
            echo "Created tag: web-v$WEB_NEW_VERSION"
          fi

          if [ "${{ steps.changed-files.outputs.mobile_changed }}" = "true" ] && [ -n "$MOBILE_NEW_VERSION" ]; then
            git tag "mobile-v$MOBILE_NEW_VERSION"
            echo "Created tag: mobile-v$MOBILE_NEW_VERSION"
          fi

          # Pousser les tags seulement s'il y en a de nouveaux
          if git tag -l | grep -E "^(server-v|web-v|mobile-v)" | tail -1 > /dev/null; then
            git push origin --tags
            echo "Tags pushed to repository"
          else
            echo "No new tags to push"
          fi
