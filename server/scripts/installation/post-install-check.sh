#!/bin/bash
set -e

# Script de v√©rification post-installation
# V√©rifie que tous les composants sont correctement install√©s

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Source des fonctions communes
source "$PROJECT_ROOT/scripts/core/airastro-common.sh"

log_info "üîç V√©rification post-installation AirAstro"
echo

# Variables de suivi
ISSUES_FOUND=0
EQUIPMENT_DETECTED=0
EQUIPMENT_CONFIGURED=0

# Fonction pour signaler un probl√®me
report_issue() {
    local message="$1"
    local severity="${2:-WARNING}"

    if [ "$severity" = "ERROR" ]; then
        log_error "$message"
        ((ISSUES_FOUND++))
    else
        log_warning "$message"
    fi
}

# Fonction pour signaler un succ√®s
report_success() {
    local message="$1"
    log_success "$message"
}

# 1. V√©rification des services de base
log_info "=== V√©rification des services de base ==="

# Service AirAstro
if systemctl is-active --quiet airastro 2>/dev/null; then
    report_success "Service AirAstro actif"
elif systemctl is-enabled --quiet airastro 2>/dev/null; then
    log_info "Service AirAstro configur√© mais pas actif"
    sudo systemctl start airastro
    if systemctl is-active --quiet airastro; then
        report_success "Service AirAstro d√©marr√©"
    else
        report_issue "Service AirAstro ne peut pas d√©marrer" "ERROR"
    fi
else
    report_issue "Service AirAstro non configur√©" "ERROR"
fi

# Service INDI
if command -v indiserver >/dev/null; then
    report_success "INDI server disponible"
    if systemctl is-active --quiet indiserver 2>/dev/null; then
        report_success "Service INDI actif"
    else
        log_info "Service INDI non actif (normal)"
    fi
else
    report_issue "INDI server non disponible" "ERROR"
fi

# Service hotspot
if systemctl is-enabled --quiet start-hotspot 2>/dev/null; then
    report_success "Service hotspot configur√©"
else
    report_issue "Service hotspot non configur√©"
fi

echo

# 2. V√©rification des modules Python
log_info "=== V√©rification des modules Python ==="

PYTHON_MODULES=(
    "numpy:NumPy (calculs scientifiques)"
    "astropy:AstroPy (astronomie)"
    "pyindi_client:PyINDI (client INDI)"
)

for module_info in "${PYTHON_MODULES[@]}"; do
    module_name=$(echo "$module_info" | cut -d: -f1)
    module_desc=$(echo "$module_info" | cut -d: -f2)

    if python3 -c "import $module_name" 2>/dev/null; then
        report_success "$module_desc install√©"
    else
        report_issue "$module_desc non disponible"
    fi
done

echo

# 3. D√©tection automatique des √©quipements
log_info "=== D√©tection automatique des √©quipements ==="

# Cam√©ras ASI
if lsusb | grep -q "03c3"; then
    ((EQUIPMENT_DETECTED++))
    report_success "Cam√©ra(s) ZWO ASI d√©tect√©e(s)"
    lsusb | grep "03c3" | sed 's/^/    /'

    # V√©rifier le support ASI
    if python3 -c "import zwoasi" 2>/dev/null; then
        report_success "Support Python ASI install√©"
        ((EQUIPMENT_CONFIGURED++))
    else
        report_issue "Support Python ASI manquant"
        log_info "Solution: $PROJECT_ROOT/scripts/brands/asi/install-asi-python.sh"
    fi

    if [ -f "/usr/bin/indi_asi_ccd" ]; then
        report_success "Driver INDI ASI install√©"
    else
        report_issue "Driver INDI ASI manquant"
        log_info "Solution: sudo apt install indi-asi"
    fi
fi

# Cam√©ras QHY
if lsusb | grep -q "1618"; then
    ((EQUIPMENT_DETECTED++))
    report_success "Cam√©ra(s) QHY d√©tect√©e(s)"
    lsusb | grep "1618" | sed 's/^/    /'

    if [ -f "/usr/bin/indi_qhy_ccd" ]; then
        report_success "Driver INDI QHY install√©"
        ((EQUIPMENT_CONFIGURED++))
    else
        report_issue "Driver INDI QHY manquant"
        log_info "Solution: sudo apt install indi-qhy"
    fi
fi

# Cam√©ras Canon
if lsusb | grep -q "04a9"; then
    ((EQUIPMENT_DETECTED++))
    report_success "Cam√©ra(s) Canon d√©tect√©e(s)"
    lsusb | grep "04a9" | sed 's/^/    /'

    if [ -f "/usr/bin/indi_canon_ccd" ]; then
        report_success "Driver INDI Canon install√©"
        ((EQUIPMENT_CONFIGURED++))
    else
        report_issue "Driver INDI Canon manquant"
        log_info "Solution: sudo apt install indi-gphoto"
    fi
fi

# Cam√©ras Nikon
if lsusb | grep -q "04b0"; then
    ((EQUIPMENT_DETECTED++))
    report_success "Cam√©ra(s) Nikon d√©tect√©e(s)"
    lsusb | grep "04b0" | sed 's/^/    /'

    if [ -f "/usr/bin/indi_nikon_ccd" ]; then
        report_success "Driver INDI Nikon install√©"
        ((EQUIPMENT_CONFIGURED++))
    else
        report_issue "Driver INDI Nikon manquant"
        log_info "Solution: sudo apt install indi-gphoto"
    fi
fi

if [ "$EQUIPMENT_DETECTED" -eq 0 ]; then
    log_info "Aucun √©quipement astronomique d√©tect√©"
    log_info "Connectez vos √©quipements et relancez cette v√©rification"
fi

echo

# 4. V√©rification de la connectivit√© r√©seau
log_info "=== V√©rification de la connectivit√© r√©seau ==="

# Interface r√©seau
if ip route | grep -q "default"; then
    report_success "Connexion r√©seau disponible"
else
    report_issue "Pas de connexion r√©seau par d√©faut"
fi

# mDNS
if command -v avahi-daemon >/dev/null && systemctl is-active --quiet avahi-daemon; then
    report_success "Service mDNS actif"
else
    report_issue "Service mDNS non actif"
fi

# Test de r√©solution airastro.local
if ping -c 1 airastro.local >/dev/null 2>&1; then
    report_success "R√©solution airastro.local fonctionnelle"
else
    report_issue "R√©solution airastro.local √©chou√©e"
fi

echo

# 5. V√©rification des acc√®s
log_info "=== V√©rification des acc√®s ==="

# Port AirAstro
if netstat -tln 2>/dev/null | grep -q ":3000"; then
    report_success "Port AirAstro (3000) en √©coute"
elif ss -tln 2>/dev/null | grep -q ":3000"; then
    report_success "Port AirAstro (3000) en √©coute"
else
    report_issue "Port AirAstro (3000) non accessible"
fi

# Interface web
if [ -d "$PROJECT_ROOT/apps/web/dist" ]; then
    report_success "Interface web construite"
else
    report_issue "Interface web non construite"
fi

echo

# 6. R√©sum√© final
log_info "=== R√©sum√© de l'installation ==="
echo

echo "üìä Statistiques:"
echo "   - Probl√®mes d√©tect√©s: $ISSUES_FOUND"
echo "   - √âquipements d√©tect√©s: $EQUIPMENT_DETECTED"
echo "   - √âquipements configur√©s: $EQUIPMENT_CONFIGURED"
echo

if [ "$ISSUES_FOUND" -eq 0 ]; then
    log_success "üéâ Installation parfaite! Tous les composants sont op√©rationnels."
    echo
    echo "üöÄ AirAstro est pr√™t √† √™tre utilis√©:"
    echo "   - Interface web: http://airastro.local"
    echo "   - IP locale: http://$(hostname -I | awk '{print $1}')"
    echo "   - Point d'acc√®s: http://10.42.0.1 (si configur√©)"
    echo
elif [ "$ISSUES_FOUND" -le 2 ]; then
    log_warning "‚ö†Ô∏è  Installation avec quelques probl√®mes mineurs."
    echo
    echo "üîß Actions recommand√©es:"
    echo "   - V√©rifiez les messages d'avertissement ci-dessus"
    echo "   - Connectez vos √©quipements si n√©cessaire"
    echo "   - Relancez cette v√©rification apr√®s corrections"
    echo
else
    log_error "‚ùå Installation avec des probl√®mes importants."
    echo
    echo "üÜò Actions requises:"
    echo "   - Corrigez les erreurs signal√©es ci-dessus"
    echo "   - Consultez les logs d'installation"
    echo "   - Contactez le support si n√©cessaire"
    echo
fi

# Scripts d'aide disponibles
log_info "üõ†Ô∏è  Scripts d'aide disponibles:"
echo "   - Diagnostic ASI: $PROJECT_ROOT/scripts/brands/asi/diagnose-asi.sh"
echo "   - Gestion √©quipements: $PROJECT_ROOT/scripts/equipment-manager.sh"
echo "   - Configuration mDNS: $PROJECT_ROOT/scripts/configure-mdns.sh"
echo "   - Cette v√©rification: $0"
echo

# Code de sortie
exit "$ISSUES_FOUND"
